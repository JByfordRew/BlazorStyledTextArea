@using BlazorTextarea
<div id="@id" class='textarea-container @(isEditing ? "blazor-styled-textarea-focus" : "blazor-styled-textarea")'>
    @if (isEditing || hasSelection) {
    <div class="just-content overlayed no-interaction @classAttributeValue" style="@styleAttributeValue">
        @for (int i = 0; i < markupLines.Count; i++) {
            <span @key="markupLines[i].Id">@GetMarkup(i)</span><br /> 
        }
    </div>
    }
    @if (UseStandardTextarea)
    {
        <textarea class=@textareaClass 
            @ref=standardTextarea         
            @bind-value=Text
            @bind-value:event="oninput"
            @onfocus=OnFocus
            @onblur=OnBlur
            @onclick=OnClick
            @onmousedown=OnMouseDown
            @onmousemove=OnMouseMove
            @onmouseup=OnMouseUp
            @onkeyup=OnKeyUp
            @attributes=additionalAttributes>
        </textarea>
    }
    else {
        <Textarea class=@textareaClass 
            @ref=textarea         
            @bind-value=Text
            @bind-value:event="oninput"
            BatchUpdates=true
            @onfocus=OnFocus
            @onblur=OnBlur
            @onclick=OnClick
            @onmousedown=OnMouseDown
            @onmousemove=OnMouseMove
            @onmouseup=OnMouseUp
            @onkeyup=OnKeyUp
            @attributes=additionalAttributes>
        </Textarea>
    }
    @if (!isEditing && !hasSelection) {
    <div class="just-content overlayed no-interaction @classAttributeValue" style="@styleAttributeValue">
        @for (int i = 0; i < markupLines.Count; i++) {
            <span @key="markupLines[i].Id">@GetMarkup(i)</span><br /> 
        }
    </div>
    }
</div>
<div>
    <div id='id-@this.id.ToString()-bsta-typeahead' class="@classAttributeValue" style='line-height: initial; position: absolute; top: @((caretData.Top)+"px"); left: @((caretData.Left)+"px"); @styleAttributeValue'>
        @if (InlineTypeahead is not null)
        {
            @InlineTypeahead
        }
    </div>
    @if (CustomTypeahead is not null) {
        @CustomTypeahead
    }
</div>
